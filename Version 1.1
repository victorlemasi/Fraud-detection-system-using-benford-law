import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

class BenfordAnalyzer:
    def __init__(self):
        # Expected frequencies according to Benford's Law
        self.benford_expected = {
            1: 30.1, 2: 17.6, 3: 12.5, 4: 9.7,
            5: 7.9, 6: 6.7, 7: 5.8, 8: 5.1, 9: 4.6
        }
        
    def get_first_digit(self, number):
        """Extract the first digit of a number."""
        return int(str(abs(float(number))).replace('.', '')[:1])
    
    def calculate_distribution(self, data):
        """Calculate the actual distribution of first digits in the dataset."""
        first_digits = [self.get_first_digit(num) for num in data if str(num).strip()]
        digit_counts = pd.Series(first_digits).value_counts().sort_index()
        total_count = len(first_digits)
        
        actual_distribution = (digit_counts / total_count * 100).round(1)
        return actual_distribution
    
    def chi_square_test(self, actual_distribution):
        """Perform chi-square test to compare actual vs expected distributions."""
        observed = [actual_distribution.get(i, 0) for i in range(1, 10)]
        expected = [self.benford_expected[i] for i in range(1, 10)]
        
        chi_square, p_value = stats.chisquare(observed, expected)
        return chi_square, p_value
    
    def analyze(self, data, threshold=0.05):
        """
        Analyze the data using Benford's Law.
        
        Args:
            data: List or array of numerical values
            threshold: Significance level for chi-square test (default: 0.05)
            
        Returns:
            dict: Analysis results including distributions and statistical tests
        """
        # Calculate actual distribution
        actual_dist = self.calculate_distribution(data)
        
        # Perform chi-square test
        chi_square, p_value = self.chi_square_test(actual_dist)
        
        # Calculate deviations
        deviations = {
            digit: round(actual_dist.get(digit, 0) - self.benford_expected[digit], 2)
            for digit in range(1, 10)
        }
        
        # Determine if the data follows Benford's Law
        follows_benford = p_value > threshold
        
        # Calculate risk score (0-100)
        max_deviation = max(abs(dev) for dev in deviations.values())
        risk_score = min(100, round((max_deviation / 10) * 100))
        
        return {
            'actual_distribution': actual_dist.to_dict(),
            'expected_distribution': self.benford_expected,
            'deviations': deviations,
            'chi_square': round(chi_square, 2),
            'p_value': round(p_value, 4),
            'follows_benford': follows_benford,
            'risk_score': risk_score
        }
    
    def plot_distributions(self, data):
        """Generate a visualization comparing actual vs expected distributions."""
        actual_dist = self.calculate_distribution(data)
        
        plt.figure(figsize=(12, 6))
        x = range(1, 10)
        
        plt.bar([i - 0.2 for i in x], [actual_dist.get(i, 0) for i in x], 
                width=0.4, label='Actual Distribution', color='blue', alpha=0.6)
        plt.bar([i + 0.2 for i in x], [self.benford_expected[i] for i in x], 
                width=0.4, label="Benford's Law", color='red', alpha=0.6)
        
        plt.xlabel('First Digit')
        plt.ylabel('Frequency (%)')
        plt.title("Actual Distribution vs Benford's Law")
        plt.legend()
        plt.grid(True, alpha=0.3)
        plt.show()

# Example usage
if __name__ == "__main__":
    # Sample financial data
    sample_data = [
        1234.56, 234.56, 345.67, 456.78, 156.78, 
        2345.67, 345.67, 567.89, 789.12, 123.45
    ]
    
    # Create analyzer instance
    analyzer = BenfordAnalyzer()
    
    # Analyze data
    results = analyzer.analyze(sample_data)
    
    # Print results
    print("\nFraud Detection Analysis Results:")
    print("---------------------------------")
    print(f"Follows Benford's Law: {'Yes' if results['follows_benford'] else 'No'}")
    print(f"Risk Score: {results['risk_score']}/100")
    print(f"Chi-square statistic: {results['chi_square']}")
    print(f"P-value: {results['p_value']}")
    
    # Plot the distributions
    analyzer.plot_distributions(sample_data)
